-- This code has been generated by the following:
-- > :load examples QuickHull.hs
-- > let (fx,fy,ax,ay,s) = farAndAbove npts segd xs ys x1s y1s x2s y2s
-- > getCode $ ax |*| ay |*| fx |*| fy |*| s
-- Note that the order of arrays is different.
--
-- In the code below:
-- segd: arr_12
-- Lines x1s y1s x2s y2s: arr_13 _15 _17 _19
-- Points (seq/random) arr_9 _10 / arr_24 _34
--
-- Call as
-- let n = length xs
--     (above_xs, above_ys, far_xs, far_ys, segd')
--       = run xs ys segd x1s y1s x2s y2s xs ys n n n n n n
{-# LANGUAGE BangPatterns #-}                                           
module Plugin ( run ) where        
                                                                        
import Data.Vector.Unboxed as V                                         
import Data.Vector.Unboxed.Mutable as MV                                
import Unsafe.Coerce                                                    
import Data.Dynamic                                                     
import Data.Ratio                                                       
import GHC.Prim (Any)                                                   
import GHC.Num                                                          
import GHC.Real                                                         
import GHC.Classes                                                      
import GHC.Types                                                        
import GHC.Tuple                                                        
import Control.Monad.ST                                                 
import Control.Monad.Primitive                                          
import Data.Tuple                                                       
                                                                        
fd :: Typeable a => Dynamic -> a                                        
fd d = case fromDynamic d of                                            
         Just v  -> v                                                   
         Nothing -> error "Argument type mismatch"                    
                                                                        
arrayLength :: Unbox a => V.Vector a -> Int                             
arrayLength = V.length                                                  
                                                                        
readArray :: V.Unbox a => V.Vector a -> Int -> a                        
readArray = V.unsafeIndex                                               
                                                                        
writeArray :: V.Unbox a => MV.MVector s a -> Int -> a -> ST s ()        
writeArray arr i x = MV.unsafeWrite arr i x                             
                                                                        
newArray :: V.Unbox a => Int -> ST s (MV.MVector s a)                   
newArray n = MV.new n                                                   
                                                                        
sliceArray :: (V.Unbox a, PrimMonad m) => MV.MVector (PrimState m) a -> Int -> m (V.Vector a) 
sliceArray vec len = V.unsafeFreeze $ MV.unsafeTake len vec             
                                                                        
entry :: [Dynamic] -> Dynamic
entry [!arr_9,
       !arr_10,
       !arr_12,
       !arr_13,
       !arr_15,
       !arr_17,
       !arr_19,
       !arr_24,
       !arr_34,
       !len_11,
       !len_14,
       !len_16,
       !len_18,
       !len_20,
       !len_32] = toDyn (run (fd arr_9) (fd arr_10) (fd arr_12) (fd arr_13) (fd arr_15) (fd arr_17) (fd arr_19) (fd arr_24) (fd arr_34) (fd len_11) (fd len_14) (fd len_16) (fd len_18) (fd len_20) (fd len_32))
run :: Vector Double ->
       Vector Double ->
       Vector Int ->
       Vector Double ->
       Vector Double ->
       Vector Double ->
       Vector Double ->
       Vector Double ->
       Vector Double ->
       Int ->
       Int ->
       Int ->
       Int ->
       Int ->
       Int ->
       (,) ((,) ((,) ((,) (Vector Double) (Vector Double))
                     (Vector Double))
                (Vector Double))
           (Vector Int)
run (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_11) (!len_14) (!len_16) (!len_18) (!len_20) (!len_32) = runST (init_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32)
bottom_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) (!elt_22) (!elt_5) (!elt_6) = do bottom_7 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9 elt_22 elt_5 elt_6
nest_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) = do body_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9
body_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) = do {let {!elt_6 = elt_21};
                                                                                                                                                                                                                                                                                                                                                                                                                                  let {!elt_5 = (\a -> Data.Tuple.fst a) elt_6};
                                                                                                                                                                                                                                                                                                                                                                                                                                  let {!elt_22 = (\a -> Data.Tuple.snd a) elt_6};
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (\a -> (GHC.Classes.==) a GHC.Types.True) elt_7
                                                                                                                                                                                                                                                                                                                                                                                                                                   then do yield_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9 elt_22 elt_5 elt_6
                                                                                                                                                                                                                                                                                                                                                                                                                                   else bottom_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9 elt_22 elt_5 elt_6}
yield_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) (!elt_22) (!elt_5) (!elt_6) = do {let {!ix_6' = (\a -> \b -> (GHC.Num.+) a b) ix_6 (GHC.Num.fromInteger 1)};
                                                                                                                                                                                                                                                                                                                                                                                                                                                               writeArray arr_5 ix_6 elt_5;
                                                                                                                                                                                                                                                                                                                                                                                                                                                               writeArray arr_22 ix_6 elt_22;
                                                                                                                                                                                                                                                                                                                                                                                                                                                               bottom_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6' z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9 elt_22 elt_5 elt_6}
bottom_7 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) (!elt_22) (!elt_5) (!elt_6) = do {let {!elt_32' = (\a -> \b -> (GHC.Num.+) a b) elt_32 (GHC.Num.fromInteger 1)};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let {!acc_29' = (\a -> \b -> (\p_0 x_1 y_2 -> case p_0 of
ypes.True -> x_1
ypes.False -> y_2) ((GHC.Classes.>=) (Data.Tuple.snd a) (Data.Tuple.snd b)) a b) acc_29 elt_31};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let {!acc_35' = (\a -> \b -> (GHC.Num.+) a b) acc_35 elt_37};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                guard_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35' acc_29' elt_32' elt_19 elt_17 elt_15 elt_13}
yield_7 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_37) (!elt_31) (!elt_7) (!elt_8) (!elt_21) (!elt_10) (!elt_9) = do {let {!ix_10' = (\a -> \b -> (GHC.Num.+) a b) ix_10 (GHC.Num.fromInteger 1)};
                                                                                                                                                                                                                                                                                                                                                                                                                                   nest_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10' ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9}
body_7 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) = do {let {!elt_9 = readArray arr_9 ix_10};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_10 = readArray arr_10 ix_10};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_21 = (\a -> \b -> (,) a b) elt_9 elt_10};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_11 = elt_13};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_14 = elt_15};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_16 = elt_17};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_18 = elt_19};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_8 = (\a -> \b -> \c -> \d -> \e -> \f -> (GHC.Num.-) ((GHC.Num.*) ((GHC.Num.-) c a) ((GHC.Num.-) f b)) ((GHC.Num.*) ((GHC.Num.-) d b) ((GHC.Num.-) e a))) elt_9 elt_10 elt_11 elt_14 elt_16 elt_18};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_20 = GHC.Num.fromInteger 0};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_7 = (\a -> \b -> (GHC.Classes.>) a b) elt_8 elt_20};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_31 = (\a -> \b -> (,) a b) elt_32 elt_8};
                                                                                                                                                                                                                                                                                                                                                               let {!elt_37 = (\a -> (\p_3 x_4 y_5 -> case p_3 of
                                                                                                                                                                                                                                                                                                                                                                                                          GHC.Types.True -> x_4
                                                                                                                                                                                                                                                                                                                                                                                                          GHC.Types.False -> y_5) ((GHC.Classes.==) a GHC.Types.True) (GHC.Num.fromInteger 1) (GHC.Num.fromInteger 0)) elt_7};
                                                                                                                                                                                                                                                                                                                                                               yield_7 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_37 elt_31 elt_7 elt_8 elt_21 elt_10 elt_9}
nest_7 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) = do body_7 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13
guard_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) = do if (\a -> \b -> (GHC.Classes.<) a b) ix_10 end_12
                                                                                                                                                                                                                                                                                                                                                                then do nest_7 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13
                                                                                                                                                                                                                                                                                                                                                                else body_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13
done_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) = do {!result_5 <- sliceArray arr_5 ix_6;
                                                                                                                                                                                                                                                                     !result_22 <- sliceArray arr_22 ix_6;
                                                                                                                                                                                                                                                                     !result_23 <- sliceArray arr_23 ix_15;
                                                                                                                                                                                                                                                                     !result_33 <- sliceArray arr_33 ix_15;
                                                                                                                                                                                                                                                                     !result_35 <- sliceArray arr_35 ix_15;
                                                                                                                                                                                                                                                                     return ((((result_5,
                                                                                                                                                                                                                                                                                result_22),
                                                                                                                                                                                                                                                                               result_23),
                                                                                                                                                                                                                                                                              result_33),
                                                                                                                                                                                                                                                                             result_35)}
init_5 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) = do {let {!len_9 = arrayLength arr_9};
                                                                                                                let {!len_10 = arrayLength arr_10};
                                                                                                                let {!len_21 = len_9};
                                                                                                                let {!len_12 = arrayLength arr_12};
                                                                                                                let {!len_13 = arrayLength arr_13};
                                                                                                                let {!len_15 = arrayLength arr_15};
                                                                                                                let {!len_17 = arrayLength arr_17};
                                                                                                                let {!len_19 = arrayLength arr_19};
                                                                                                                let {!len_8 = len_9};
                                                                                                                let {!len_7 = len_8};
                                                                                                                let {!len_6 = len_21};
                                                                                                                let {!len_5 = len_6};
                                                                                                                let {!len_22 = len_6};
                                                                                                                let {!len_26 = len_12};
                                                                                                                let {!z_26 = GHC.Num.fromInteger 0};
                                                                                                                let {!acc_26 = z_26};
                                                                                                                let {!len_31 = len_32};
                                                                                                                let {!len_29 = len_12};
                                                                                                                let {!z_29 = (,) (GHC.Num.fromInteger 0) (GHC.Num.negate (GHC.Num.fromInteger 999999))};
                                                                                                                let {!len_28 = len_29};
                                                                                                                let {!len_25 = len_26};
                                                                                                                let {!len_24 = arrayLength arr_24};
                                                                                                                let {!len_23 = len_25};
                                                                                                                let {!len_34 = arrayLength arr_34};
                                                                                                                let {!len_33 = len_25};
                                                                                                                let {!len_37 = len_7};
                                                                                                                let {!len_35 = len_12};
                                                                                                                let {!z_35 = GHC.Num.fromInteger 0};
                                                                                                                let {!ix_6 = GHC.Num.fromInteger 0};
                                                                                                                let {!ix_10 = GHC.Num.fromInteger 0};
                                                                                                                let {!ix_15 = GHC.Num.fromInteger 0};
                                                                                                                !arr_5 <- newArray len_5;
                                                                                                                !arr_22 <- newArray len_22;
                                                                                                                !arr_23 <- newArray len_23;
                                                                                                                !arr_33 <- newArray len_33;
                                                                                                                !arr_35 <- newArray len_35;
                                                                                                                guard_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9}
bottom_12 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_35) (!elt_33) (!elt_23) (!elt_25) = do {let {!acc_26' = (\a -> \b -> (GHC.Num.+) a b) acc_26 elt_12};
                                                                                                                                                                                                                                                                                                                                                                                                          guard_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26' len_6 len_15 len_12 len_9}
yield_12 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) (!elt_35) (!elt_33) (!elt_23) (!elt_25) = do {let {!ix_15' = (\a -> \b -> (GHC.Num.+) a b) ix_15 (GHC.Num.fromInteger 1)};
                                                                                                                                                                                                                                                                                                                                                                                                         writeArray arr_23 ix_15 elt_23;
                                                                                                                                                                                                                                                                                                                                                                                                         writeArray arr_33 ix_15 elt_33;
                                                                                                                                                                                                                                                                                                                                                                                                         writeArray arr_35 ix_15 elt_35;
                                                                                                                                                                                                                                                                                                                                                                                                         bottom_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15' ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_35 elt_33 elt_23 elt_25}
body_12 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) (!end_12) (!elt_12) (!acc_35) (!acc_29) (!elt_32) (!elt_19) (!elt_17) (!elt_15) (!elt_13) = do {let {!elt_26 = acc_26};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_29 = acc_29};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_28 = (\a -> Data.Tuple.fst a) elt_29};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_25 = (\a -> \b -> (GHC.Num.+) a b) elt_26 elt_28};
                                                                                                                                                                                                                                                                                                                                                                let {!ix_24 = elt_25};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_24 = readArray arr_24 ix_24};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_23 = elt_24};
                                                                                                                                                                                                                                                                                                                                                                let {!ix_34 = elt_25};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_34 = readArray arr_34 ix_34};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_33 = elt_34};
                                                                                                                                                                                                                                                                                                                                                                let {!elt_35 = acc_35};
                                                                                                                                                                                                                                                                                                                                                                yield_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13 elt_35 elt_33 elt_23 elt_25}
nest_12 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) = do {let {!elt_13 = readArray arr_13 ix_15};
                                                                                                                                                                                                                                                                      let {!elt_15 = readArray arr_15 ix_15};
                                                                                                                                                                                                                                                                      let {!elt_17 = readArray arr_17 ix_15};
                                                                                                                                                                                                                                                                      let {!elt_19 = readArray arr_19 ix_15};
                                                                                                                                                                                                                                                                      let {!elt_32 = GHC.Num.fromInteger 0};
                                                                                                                                                                                                                                                                      let {!acc_29 = z_29};
                                                                                                                                                                                                                                                                      let {!acc_35 = z_35};
                                                                                                                                                                                                                                                                      let {!elt_12 = readArray arr_12 ix_15};
                                                                                                                                                                                                                                                                      let {!end_12 = (\a -> \b -> (GHC.Num.+) a b) ix_10 elt_12};
                                                                                                                                                                                                                                                                      guard_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9 end_12 elt_12 acc_35 acc_29 elt_32 elt_19 elt_17 elt_15 elt_13}
guard_12 (!arr_9) (!arr_10) (!arr_12) (!arr_13) (!arr_15) (!arr_17) (!arr_19) (!arr_24) (!arr_34) (!len_32) (!arr_35) (!arr_33) (!arr_23) (!arr_22) (!arr_5) (!ix_15) (!ix_10) (!ix_6) (!z_35) (!len_25) (!z_29) (!acc_26) (!len_6) (!len_15) (!len_12) (!len_9) = do if (\a -> \b -> (GHC.Classes.<) a b) ix_15 len_15
                                                                                                                                                                                                                                                                       then do nest_12 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9
                                                                                                                                                                                                                                                                       else done_5 arr_9 arr_10 arr_12 arr_13 arr_15 arr_17 arr_19 arr_24 arr_34 len_32 arr_35 arr_33 arr_23 arr_22 arr_5 ix_15 ix_10 ix_6 z_35 len_25 z_29 acc_26 len_6 len_15 len_12 len_9